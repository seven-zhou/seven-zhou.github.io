<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Geeker 小周]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://seven-zhou.github.io/"/>
  <updated>2015-11-26T09:15:54.000Z</updated>
  <id>http://seven-zhou.github.io/</id>
  
  <author>
    <name><![CDATA[seven-zhou]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[惊喜发现Python的virtualenvwrapper的隐藏功能]]></title>
    <link href="http://seven-zhou.github.io/2015/11/26/%E6%83%8A%E5%96%9C%E5%8F%91%E7%8E%B0Python%E7%9A%84virtualenvwrapper%E7%9A%84%E9%9A%90%E8%97%8F%E5%8A%9F%E8%83%BD/"/>
    <id>http://seven-zhou.github.io/2015/11/26/惊喜发现Python的virtualenvwrapper的隐藏功能/</id>
    <published>2015-11-26T09:00:52.000Z</published>
    <updated>2015-11-26T09:15:54.000Z</updated>
    <content type="html"><![CDATA[<p>今天在调试Python程序的时候，无意间发现一个惊喜的情况，就是进入一个项目目录后，会自动切换到与目录名称一致的Python虚拟环境，真是又惊又喜。</p>
<p>本来想测试BUCK构建的Python二进制文件解压后，无法自动找到Python的路径，没想到每次进入目录都自动切换到了对应的Python虚拟环境，同时我没有在此目录下添加.venv的文件，瞬间迷茫了，不知道为什么。</p>
<p>经过对目录里面的文件和文件夹各种删除，终于让我发现，这个现象与.git文件夹有关，就去查看virtualenvwrapper官网手册，以确认这个问题，在被我忽视的角落里发现了这段话：Harry Marr wrote a similar function that works with <a href="http://hmarr.com/2010/jan/19/making-virtualenv-play-nice-with-git/" target="_blank" rel="external">git repositories</a>，算是有了一个明确的结论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在调试Python程序的时候，无意间发现一个惊喜的情况，就是进入一个项目目录后，会自动切换到与目录名称一致的Python虚拟环境，真是又惊又喜。</p>
<p>本来想测试BUCK构建的Python二进制文件解压后，无法自动找到Python的路径，没想到每次进入目录都自动]]>
    </summary>
    
      <category term="python" scheme="http://seven-zhou.github.io/tags/python/"/>
    
      <category term="技术" scheme="http://seven-zhou.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建私人的Docker仓库]]></title>
    <link href="http://seven-zhou.github.io/2015/10/28/%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E7%9A%84Docker-Images/"/>
    <id>http://seven-zhou.github.io/2015/10/28/搭建私人的Docker-Images/</id>
    <published>2015-10-28T02:47:32.000Z</published>
    <updated>2015-10-28T04:15:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>目前Docker的虚拟化技术非常的火爆，越来越多的公司开始使用Docker，所以，我也开始在公司推行Docker的使用，先从开发环境入手，使用Docker来构造开发环境，这样可以方便各种研发人员快速使用，节省时间成本。稍后准备在生产环境使用Docker，不过这个过程要比开发环境要复杂的多，需要从Docker集群的部署，运维和管理各个方面做好准备，有里面需要探讨的东西会有很多，我会结合自身使用的情况，不断记录，和大家一同探索Docker。</p>
<h2 id="需求">需求</h2><p>由于国内网络的问题，同时考虑公司的一些安全的问题，所以Docker Hub是无法满足我们对Docker仓库管理的需求，所以就需要自己搭建一个私人的Docker仓库。这样无论速度，还是安全方面都有保障，同时也更好控制。</p>
<h2 id="调研">调研</h2><p>发现开源的私人Docker仓库的项目，主要是Docker公司的自己<a href="https://github.com/docker/docker-registry" target="_blank" rel="external">docker-registry</a>和<a href="https://github.com/docker/distribution" target="_blank" rel="external">distribution</a>，docker-registry是使用python开发的，而distribution是用GO开发，官方也明确表示建议使用distribution，而docker-registry后续会被废弃。既然如此，果断跟随Docker公司的脚步，决定使用distribution。</p>
<p>distribution只是一个API server，没有提供可视化的界面，为了后续更加方便的管理，如镜像管理，用户权限管理等。发现了SUSE的<a href="http://suse.github.io/Portus/" target="_blank" rel="external">Portus</a>，非常好的满足了需求，而且界面也非常漂亮。</p>
<h2 id="部署distribution">部署distribution</h2><p>distribution项目提供了一个Docker的镜像使用，安装使用非常方便，但国内的网络下载镜像十分痛苦，几乎不可用的程度。所以，决定手动安装distribution，这样也可以更好的了解distribution项目。</p>
<h3 id="1_系统环境">1 系统环境</h3><p>安装go1.4.2以上的版本，建议可以通过gvm管理go的版本，这里我就不多介绍，网上资料还是非常的多。</p>
<h3 id="2_编译distribution">2 编译distribution</h3><p><code>gvm use 1.4.2</code></p>
<p><code>mkdir -p $GOPATH/src/github.com/docker</code></p>
<p><code>git clone https://github.com/docker/distribution.git $GOPATH/src/github.com/docker/distribution</code></p>
<p><code>cd $GOPATH/src/github.com/docker/distribution</code></p>
<p><code>GOPATH=$(PWD)/Godeps/_workspace:$GOPATH make binaries</code></p>
<p><code>sudo cp bin/registry /usr/local/bin/registry</code></p>
<h3 id="3_运行及使用">3 运行及使用</h3><p><code>cp $GOPATH/src/github.com/docker/distribution/cmd/registry/config-dev.yml /etc/docker/config.yml</code></p>
<p><code>registry /etc/docker/config.yml</code></p>
<p>精简的config.yml如下：</p>
<pre><code>version: <span class="number">0.1</span>
loglevel: debug
storage:
  filesystem:
    rootdirectory: /tmp/registry
  <span class="keyword">delete</span>:
    enabled: <span class="literal">true</span>
http:
  addr: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">5000</span>
  debug:
    addr: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">5001</span>
</code></pre><p>备注：配置文件的位置可以自定义，同时需要修改配置文件里面的storage &gt; filesystem &gt; rootdirectory为自己本地的目录</p>
<p>distribution服务正常启动后，就可以按照下面的命令进行使用了。<br><code>docker tag busybox 127.0.0.1:5000/busybox</code></p>
<p><code>docker push 127.0.0.1:5000/busybox</code></p>
<p><code>docker pull 127.0.0.1:5000/busybox</code></p>
<h2 id="部署Portus">部署Portus</h2><p>Portus项目是使用docker-compose进行部署的，官方提供一个compose-setup.sh的脚本快速安装，十分方便，不过国内的网络，在下载Docker镜像的时候还是十分痛苦。同时考虑到后续运维的需要，还是决定手动安装。</p>
<h3 id="1_系统环境-1">1 系统环境</h3><p>安装ruby2.2.3以上版本，可以通过rvm进行安装，网上的资料也非常多。<br>安装mysql5.6以上版本，因为需要支持fulltext index</p>
<h3 id="2_安装portus">2 安装portus</h3><p><code>gem install bundle</code></p>
<p>进入Portus项目的目录，安装ruby依赖</p>
<p><code>bundle install</code></p>
<h3 id="3_运行及使用-1">3 运行及使用</h3><p>同步数据库</p>
<p><code>rake db:create</code></p>
<p><code>rake db:migrate</code></p>
<p><code>rake db:seed</code></p>
<p>运行server，注意必须是多实例的方式，因为里面有回调的方法，不然会出现卡死。<br><code>bundle exec puma -b tcp://0.0.0.0:3000 -w 10</code></p>
<p>运行定时任务，为了及时同步distribution的仓库状态<br><code>bundle exec crono</code></p>
<p>特别注意：<br>为了配合使用Portus，需要修改distribution的config.yml文件，重新启动，修改后如下：</p>
<pre><code><span class="attribute">version</span>: <span class="number">0.1</span>
<span class="attribute">loglevel</span>: debug
<span class="attribute">storage</span>:
    <span class="attribute">filesystem</span>:
        <span class="attribute">rootdirectory</span>: /tmp/registry
    <span class="attribute">delete</span>:
        <span class="attribute">enabled</span>: true
<span class="attribute">http</span>:
    <span class="attribute">addr</span>: <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5000</span>
    <span class="attribute">debug</span>:
        <span class="attribute">addr</span>: <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5001</span>
auth
    <span class="attribute">token</span>:
        <span class="attribute">realm</span>: <span class="attribute">http</span>:<span class="comment">//127.0.0.1:3000/v2/token</span>
        <span class="attribute">service</span>: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>
        <span class="attribute">issuer</span>: portus.test.lan #不可以修改，因为证书使用的是这个域名
        <span class="attribute">rootcertbundle</span>: portus/docker/registry/portus.crt #在portus项目的目录里面
<span class="attribute">notifications</span>:
    <span class="attribute">endpoints</span>:
      - <span class="attribute">name</span>: portus
        <span class="attribute">url</span>: <span class="attribute">http</span>:<span class="comment">//127.0.0.1:3000/v2/webhooks/events</span>
        <span class="attribute">timeout</span>: <span class="number">500ms</span>
        <span class="attribute">threshold</span>: <span class="number">5</span>
        <span class="attribute">backoff</span>: <span class="number">1s</span>
</code></pre><p>如何使用，可以看官网提供的视频，还是很方便使用的。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用docker distribution + Portus搭建私人的docker仓库]]>
    
    </summary>
    
      <category term="Docker" scheme="http://seven-zhou.github.io/tags/Docker/"/>
    
      <category term="技术" scheme="http://seven-zhou.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修复virtualbox不能上网的问题]]></title>
    <link href="http://seven-zhou.github.io/2015/10/16/%E4%BF%AE%E5%A4%8Dvirtualbox%E4%B8%8D%E8%83%BD%E4%B8%8A%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://seven-zhou.github.io/2015/10/16/修复virtualbox不能上网的问题/</id>
    <published>2015-10-16T01:59:00.000Z</published>
    <updated>2015-10-16T03:16:01.000Z</updated>
    <content type="html"><![CDATA[<p>virtualbox是一个免费的虚拟机软件，非常的好用，基本上满足了我在Linux操作系统上，需要使用Windows软件的需求，同时可以安装和使用，各种你想要的操作系统，例如安卓等。</p>
<h2 id="遇到问题">遇到问题</h2><p>因为工作的原因，需要一些在Windows上即时通讯工具和办公软件，所以不得不在virtualbox上安装一个XP的虚拟机，其稳定性直接影响到工作的效率，但有时候非正常的关闭可能会导致一些莫名奇怪的问题，今天就遇到了一个这样的问题，virtualbox不能上网了。</p>
<p>可以正常进入虚拟机，设置为NAT的方式上网，在网络连接也可以看到本地连接，但在cmd里执行ipconfig，没有Ethernet adapter等信息，简单来说就是没有分配IP地址。</p>
<h2 id="解决问题">解决问题</h2><p>遇到这个问题后，首先尝试了重启系统，重启虚拟机，但均无果，故障依然继续（看来大招失效了）。只好google一下问题，发现绝大多数的都是关于如何设置virtualbox来实现上网，无法解答我的问题。不过，还是受到了启发，我发现在virtualbox的Network设置里，有一个Advanced选项，里面有Adapter Type参数，果断搞一下这个参数，万万没想到，故障修复了。</p>
<p><img src="http://7nj1fr.com1.z0.glb.clouddn.com/profilehuabanvboxsettings.png" alt="vbox settings"></p>
<h2 id="分析原因">分析原因</h2><p>解决问题的方式很土，就是将里面的参数都试了一遍，重启虚拟机，观察是否可以上网了。为了以后洋气点，所以进一步了解一下这个参数的作用。</p>
<p>virtualbox提供了6种Adapter Type供我们选择:</p>
<ul>
<li>PCNet-PCI II (Am79C970A)</li>
<li>PCnet-FAST III (Am79C973, 默认)</li>
<li>Intel PRO/1000 MT Desktop (82540EM)</li>
<li>Intel PRO/1000 T Server (82543GC)</li>
<li>Intel PRO/1000 MT Server (82545EM)</li>
<li>Paravirtualized network adapter (virtio-net)</li>
</ul>
<p>PCNet-FAST III 是预设的网卡配置，它支持大部分的操作系统，并且它具有GNU GRUB启动管理<br>Intel PRO/1000 MT Desktop 支持Windows Vista及之后的版本，免安装驱动<br>Intel PRO/1000 T Server 支持Windows XP，免安装驱动<br>Intel PRO/1000 MT Server 支持OVF(open virtualization format)<br>Paravirtualized network adapter半虚拟化，这张网卡是专为虚拟机设计的，必须另外安装Guest Addtion才能启动</p>
<p>兼容性：<br>PCNet系列兼容性好，也比较古老。<br>Intel PRO/1000系列是比较新的NIC</p>
<p>性能：<br>Intel PRO/1000系列性能要比PCNet系列要好<br>Paravirtualized network adapter要比前两者都好</p>
<p>综上所述，可以尝试Paravirtualized network adapter，如果出现兼容性方面的问题，可根据上面的信息，自行进行调整。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>virtualbox是一个免费的虚拟机软件，非常的好用，基本上满足了我在Linux操作系统上，需要使用Windows软件的需求，同时可以安装和使用，各种你想要的操作系统，例如安卓等。</p>
<h2 id="遇到问题">遇到问题</h2><p>因为工作的原因，需要一些在Wi]]>
    </summary>
    
      <category term="vbox" scheme="http://seven-zhou.github.io/tags/vbox/"/>
    
      <category term="技术" scheme="http://seven-zhou.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[影评夏洛特烦恼]]></title>
    <link href="http://seven-zhou.github.io/2015/10/13/%E5%BD%B1%E8%AF%84%E5%A4%8F%E6%B4%9B%E7%89%B9%E7%83%A6%E6%81%BC/"/>
    <id>http://seven-zhou.github.io/2015/10/13/影评夏洛特烦恼/</id>
    <published>2015-10-13T10:15:59.000Z</published>
    <updated>2015-10-14T01:39:30.000Z</updated>
    <content type="html"><![CDATA[<p>本人第一次主动写影评就献给了《夏洛特烦恼》，上学时候写的观后感都是扯淡的。</p>
<p>当在电影院里把《夏洛特烦恼》看后，内心久久不能平静，这种感觉已经很长时间没有过了，是一种发自内心深处的感触，电影的世界里充满了各种想象，各种结局，就像一面镜子折射实现中人们的影子和幻想。</p>
<p>“假如有一天你突然惊醒，发现自己只不过在高中的课堂上睡着了，现在经历的一切只不过是一场梦。阳光照在你的脸上，眼睛眯成一团。然后你告诉同桌，自己做了一个好长，好长的梦，同桌骂你白痴，让你好好听课…”</p>
<p>这是《夏洛特烦恼》的导演兼编剧的闫非和彭大魔创作的灵感来源，我想每个80后看完这段话，都会有所触动，那么熟悉，那么亲近，但又那么陌生，那么遥远。</p>
<p>其实《夏洛特烦恼》的故事本身很简单，想要传递的道理也很普世，就是珍惜自己身边拥有的。但为什么就是这样一个故事，却可以带来这么大的影响，尤其是在这样一个信息泛滥的时代。</p>
<p>我想是开心麻花团队，十年磨一剑的精神和坚持，才能够将每个包袱都处理得如此到位，无论是包袱的数量和质量都堪称经典。所以，还是匠人精神才能创作出让人们长久喜爱和尊敬的作品。在这里也推荐大家可以看一部纪录片《寿司之神》，很完美的诠释了匠人精神。</p>
<p>《夏洛特烦恼》的经典台词太多了，如果现在没有看过这部电影，都很难愉快的聊天了，因为随便聊天就是里面的台词。还有就是电影里面的歌曲，配合情节，让你笑中带泪。</p>
<p>最后，还是强烈推荐这部作品，如果可以的话，有必要去看看话剧版本的《夏洛特烦恼》，我已经彻底成为开心麻花的粉丝了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本人第一次主动写影评就献给了《夏洛特烦恼》，上学时候写的观后感都是扯淡的。</p>
<p>当在电影院里把《夏洛特烦恼》看后，内心久久不能平静，这种感觉已经很长时间没有过了，是一种发自内心深处的感触，电影的世界里充满了各种想象，各种结局，就像一面镜子折射实现中人们的影子和幻想]]>
    </summary>
    
      <category term="喜剧" scheme="http://seven-zhou.github.io/tags/%E5%96%9C%E5%89%A7/"/>
    
      <category term="电影" scheme="http://seven-zhou.github.io/categories/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决peewee的连接池长连接超时失效后，没有重连机制]]></title>
    <link href="http://seven-zhou.github.io/2015/10/13/%E8%A7%A3%E5%86%B3peewee%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%B1%A0%E9%95%BF%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E5%A4%B1%E6%95%88%E5%90%8E%E6%B2%A1%E6%9C%89%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6/"/>
    <id>http://seven-zhou.github.io/2015/10/13/解决peewee的连接池长连接超时失效后没有重连机制/</id>
    <published>2015-10-13T09:39:09.000Z</published>
    <updated>2015-10-13T10:08:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="遇到的问题">遇到的问题</h2><p>最近，负责一个后台运营系统的开发和维护，由于是新上线的业务，又是内部系统，所以使用的频率比较低。而今天突然就告警了，还是很意外的，告警内容如下：</p>
<p><code>OperationalError: (2006, &#39;MySQL server has gone away&#39;)</code></p>
<p>联系DBA，询问一下是否是数据库的问题，答复是数据库没有问题(当时还不知道是因为长连接失效导致，真是丢人)，果断重启服务，故障解除，这是一个解决很多问题的好方法。</p>
<h2 id="分析问题">分析问题</h2><p>google了一下，原因是peewee使用MySQLdb库没有提供检查连接的情况和自动重连的机制。</p>
<h2 id="解决问题">解决问题</h2><p>发现很多人遇到了这样的问题，并在github向peewee的作者提问，随之发现最新版本的peewee提供了<code>RetryOperationalError</code>，可以解决正常情况的失效自动重连。但是需要注意目前通过pip还不能安装到最新的这个版本，需要手动github下载安装。</p>
<p>不过，它还是不能解决<code>PooledMySQLDatabase</code>连接池失效的情况，根据<code>RetryOperationalError</code>的思路，决定自己Hack一下，就有如下的代码：</p>
<script src="https://gist.github.com/zhouxb/ced1f9ee3baa69c5c31d.js"></script>

<p>本人在本地测试，可以实现失效后重连机制，同时可以使用现有版本的peewee</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="遇到的问题">遇到的问题</h2><p>最近，负责一个后台运营系统的开发和维护，由于是新上线的业务，又是内部系统，所以使用的频率比较低。而今天突然就告警了，还是很意外的，告警内容如下：</p>
<p><code>OperationalError: (2006, &]]>
    </summary>
    
      <category term="数据库，peewee" scheme="http://seven-zhou.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8Cpeewee/"/>
    
      <category term="技术" scheme="http://seven-zhou.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[操作系统篇--打造Geek的开发环境]]></title>
    <link href="http://seven-zhou.github.io/2015/09/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87-%E6%89%93%E9%80%A0Geek%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://seven-zhou.github.io/2015/09/25/操作系统篇-打造Geek的开发环境/</id>
    <published>2015-09-25T01:46:56.000Z</published>
    <updated>2015-09-28T03:35:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="经历">经历</h2><p>开篇的部分，先随便聊一聊，自己曾使用过的电脑操作系统。</p>
<p>很多90后，00后可能都不知道什么是DOS系统，这也是我接触第一电脑操作系统，更准确的说应该叫做MS-DOS，主要是学校的机房和电脑房。</p>
<p>之后就是windows系统的电脑操作系统了，WIN98是非常经典的操作系统，当时光是看屏保就让人感到非常惊艳，那时还不知道linux系统为何物。</p>
<p>上了大学之后，才第一次接触到Linux系统，记得当时使用应该是Debian系统，第一感觉就是特别难用，还是windows系统好，使用很方便，之后才知道Linux系统的强大。</p>
<p>简单回顾了一下，自己接触过的各个电脑操作系统，当时觉得电脑实在是太酷啦，可能就是在那时决定了自己将来要从和电脑相关的工作了。</p>
<h2 id="正题">正题</h2><p>刚开始工作的时候，是windows平台上使用java语言开发eclipse的插件，主要使用的IDE理所当然就是eclipse，当时感觉eclipse太复杂啦，需要配置各种各样的插件，启动时间超长，虽然吐槽很多，但不得不说eclipse确实是开发Java的神器，同时也影响了很多后来的IDE。貌似有点跑题，今天主要说的是，操作系统的事，以后我会重点说一下关于IDE的。</p>
<p>对于绝大多数刚入行的小排程序员来说，windows平台是最熟悉，也是最容易上手的开发平台，而且目前PC使用量最大的操作系统，所以有很多配套的开发工具可以使用，例如：wireshark，fiddler，xshell等等，其实已经可以满足开发的需求啦。但如果你想进一步提高自己的效率（个人的看法），更Geek一些，那么你就不得不告别windows平台，拥抱Linux平台（或者Mac，本人目前还没有使用过去）。</p>
<p>随着互联网的不断发展，B/S结构的服务越来越流行，现在移动互联网更是异常火爆，以APP+Server的方式为广大用户提供服务，变成了一种常态。所以会很明显发现，在服务端需要开发的工作量越来越多，越来越多，而运行在服务端的应用基本上绝大多数都是基于Linux内核的操作系统，例如：centOS，RedHat，Ubuntu等。</p>
<p>使用Linux系统的好处还有很多，很多主流的服务端的软件都是运行在Linux系统上，例如：Nginx，MySQL，MongoDB等，非常非常的多，这样就可以很直观的了解这些软件的使用方式，特点，工作原理等，也可以在自己的本地环境进行各种测试。</p>
<p>Linux系统拥有大量的系统命令，让你可以更加了解计算机的工作原理，对CPU，内存，磁盘和网络都可以进行查看，修改和管理，让你有种真正掌控自己电脑的感觉。</p>
<p>说了这么一大堆，主要就是想表达选择Linux作为自己的开发系统，是一种趋势，同时也确确实实能够带来很多便利和提高效率。</p>
<h2 id="结尾">结尾</h2><p>很多事情的第一步很重要，只要你勇敢的走出第一步，你会发现其实并没有想象中那么难。所以，那些没有使用过Linux系统的人，不妨下载一个Ubuntu的镜像，自己动手安装一个属于自己的Linux系统，或许你将再也离不开它啦。后续，我会介绍一下如何安装一个Ubuntu的系统。</p>
]]></content>
    <summary type="html">
    <![CDATA[操作系统是一个非常基础的平台，确定了以后开发方式，工具的选择，所以非常关键]]>
    
    </summary>
    
      <category term="linux" scheme="http://seven-zhou.github.io/tags/linux/"/>
    
      <category term="开发环境" scheme="http://seven-zhou.github.io/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
      <category term="技术" scheme="http://seven-zhou.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个小白Geeker的独白]]></title>
    <link href="http://seven-zhou.github.io/2015/09/22/%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E5%B0%8F%E7%99%BD%E7%9A%84%E7%8B%AC%E7%99%BD/"/>
    <id>http://seven-zhou.github.io/2015/09/22/一个技术小白的独白/</id>
    <published>2015-09-22T01:47:33.000Z</published>
    <updated>2015-09-22T06:35:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="开篇">开篇</h2><p>先来一个简单的自我介绍，本人是一个pythoner，linuxer，vimer 目前主要是服务器端开发，也曾有过短暂的创业经历，对所有的技术方向都很有兴趣，可能受美国个人英雄主义腐蚀很严重的原因，希望靠一个之力搞定一切，成为一个Full Stack developer(全栈工程师)。后续的文章，就能感受得到了。</p>
<h2 id="目标">目标</h2><p>首先是私心，希望通过写这个博客，不断提高自己的文笔和技术，扩大自己的影响力，满足小小的虚荣心。</p>
<p>其次，通过记录一个一个自己的轨迹，在技术上的学习和思考，尽力去帮到一些人。</p>
<p>最后，想通过这个平台结识一些朋友，交流和分享一些对技术和生活的感受。</p>
<h2 id="计划">计划</h2><p>本人是很理科男的思维方式，做事情总想条理清晰，可以归纳总结，所以感觉上很条条框框。这是我想不断调整的地方，可以分享一下人文情怀的东西。目前，还是按照我一贯的方式去做吧。</p>
<p>我想写一些自己从技术小白成长为一个有一定能力的Geeker的点点滴滴，希望能够帮到一些人。我会梳理出一个路线图和我自己所经历的一些里程碑的事件。</p>
<p>这里先简单罗列一些：</p>
<ul>
<li>打造一个Geeker的开发环境（相对主观了一些）</li>
<li>积攒自己的技术清单和知识库</li>
<li>关于产品的思考</li>
</ul>
<p>这些主题要写的东西都很多，所以我争取每周都可以写一篇有质量的东西。</p>
<h2 id="结尾">结尾</h2><p>此刻是一个起步，前路还很漫长，勿忘初心，努力成为一个受尊敬的匠人。</p>
]]></content>
    <summary type="html">
    <![CDATA[记录从一个技术小白，做到一个还算不错的程序员的点点滴滴]]>
    
    </summary>
    
      <category term="随想" scheme="http://seven-zhou.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="技术" scheme="http://seven-zhou.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
